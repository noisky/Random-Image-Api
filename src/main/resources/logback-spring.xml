<?xml version="1.0" encoding="UTF-8"?>
<!--根节点configuration 的属性：
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--用来定义变量值的标签，有两个属性，name和value；
    其中name的值是变量的名称，value的值是变量定义的值。
    通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量-->
    <!--定义日志文件的存储地址，相对路径为项目根路径-->
    <property name="LOG_HOME" value="logs"/>
    <property name="LOG_APPNAME" value="RandomImage"/>

    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>

    <!-- 按照每天生成日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
            的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <File>${LOG_HOME}/${LOG_APPNAME}.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <fileNamePattern>${LOG_HOME}/${LOG_APPNAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--只保留最近10天的日志-->
            <maxHistory>10</maxHistory>
            <!--用来指定每个日志文件的上限大小-->
            <maxFileSize>100MB</maxFileSize>
            <!--总日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <totalSizeCap>1GB</totalSizeCap>
            <!--应用启动时删除过期日志-->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true-->
        <append>true</append>
        <!--日志输出编码格式化-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="FILE"/>
    </appender>

    <!--用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>
    name:用来指定受此loger约束的某一个包或者具体的某一个类。
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
    addtivity:是否向上级logger传递打印信息。默认是true(当为true时，还会被匹配到的root再次输出一次log)-->
    <logger name="org.apache.ibatis.cache.decorators.LoggingCache" level="INFO" additivity="false">
        <appender-ref ref="CONSOLE"/>
    </logger>
    <logger name="org.springframework.boot" level="INFO"/>
    <logger name="org.springframework.boot.autoconfigure" level="INFO"/>
    <!--邮件单独输出的logger-->
<!--    <logger name="mailLogs" additivity="false" level="INFO">-->
<!--        <appender-ref ref="MAIL_LOGS"/>-->
<!--    </logger>-->

    <!--
    root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。
    level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。 -->
    <root level="INFO">
        <!--<appender-ref ref="ASYNC"/>-->
        <!--appender将会添加到这个loger-->
        <appender-ref ref="FILE"/>
        <appender-ref ref="CONSOLE"/>
    </root>
</configuration>